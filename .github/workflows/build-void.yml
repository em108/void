name: Build Void Windows IDE

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
      with:
        repository: voideditor/void
        ref: ${{ github.event.inputs.branch }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

    - name: Cache yarn cache
      uses: actions/cache@v3
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        yarn --frozen-lockfile --verbose
      continue-on-error: true

    - name: Cache node_modules
      uses: actions/cache@v3
      if: always()
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Check and update VSCode engine version
      run: |
        $ErrorActionPreference = "Continue"
        try {
          $packageJson = Get-Content -Path package.json -Raw | ConvertFrom-Json
          $currentEngineVersion = $packageJson.engines.vscode
          Write-Host "Current engine.vscode: $currentEngineVersion"
          
          $typesVersionOutput = yarn list --pattern @types/vscode --json
          Write-Host "Types version output: $typesVersionOutput"
          
          $typesVersionJson = $typesVersionOutput | ConvertFrom-Json
          $typesVersionName = $typesVersionJson.data.trees | Where-Object { $_.name -like '@types/vscode@*' } | Select-Object -ExpandProperty name -First 1
          $typesVersion = $typesVersionName -replace '@types/vscode@', ''
          Write-Host "Current @types/vscode: $typesVersion"
          
          if ([string]::IsNullOrEmpty($currentEngineVersion) -or [string]::IsNullOrEmpty($typesVersion)) {
            Write-Host "One or both versions are empty. Skipping version comparison."
          } else {
            $engineVersion = [version]($currentEngineVersion -replace '[\^~]', '')
            $typesVersionObj = [version]$typesVersion
            
            if ($typesVersionObj -gt $engineVersion) {
              $packageJson.engines.vscode = "^$typesVersion"
              $packageJson | ConvertTo-Json -Depth 100 | Set-Content -Path package.json
              Write-Host "Updated engine.vscode to: ^$typesVersion"
            } else {
              Write-Host "No update needed. Types version is not greater than engine version."
            }
          }
        } catch {
          Write-Host "An error occurred: $_"
          Write-Host "Stack Trace: $($_.ScriptStackTrace)"
        }

    - name: Build Void
      run: |
        yarn gulp vscode-win32-x64
      continue-on-error: true

    - name: Check build output
      run: |
        if (Test-Path .\VSCode-win32-x64) {
          echo "Build output exists"
        } else {
          echo "Build output does not exist"
          exit 1
        }

    - name: Create Release ZIP
      if: success()
      run: |
        Compress-Archive -Path .\VSCode-win32-x64 -DestinationPath .\VoidIDE-Windows.zip
        if (Test-Path .\VoidIDE-Windows.zip) {
          echo "ZIP file created successfully"
        } else {
          echo "Failed to create ZIP file"
          exit 1
        }

    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: VoidIDE-Windows
        path: .\VoidIDE-Windows.zip

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          **/*.log
          **/yarn-error.log
          **/npm-debug.log
