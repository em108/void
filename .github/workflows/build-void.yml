name: Build Void Windows IDE

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
      with:
        repository: voideditor/void
        ref: ${{ github.event.inputs.branch }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

    - name: Cache yarn cache
      uses: actions/cache@v3
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        yarn --frozen-lockfile --verbose
      continue-on-error: true

    - name: Cache node_modules
      uses: actions/cache@v3
      if: always()
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Update VSCode engine version
      run: |
        $packageJson = Get-Content -Path package.json -Raw | ConvertFrom-Json
        $typesVersion = yarn list --pattern @types/vscode --depth=0 | Select-String -Pattern "@types/vscode@(\d+\.\d+\.\d+)" | ForEach-Object { $_.Matches.Groups[1].Value }
        Write-Host "Current @types/vscode version: $typesVersion"
        
        if (-not $packageJson.PSObject.Properties.Name -contains "engines") {
            $packageJson | Add-Member -NotePropertyName "engines" -NotePropertyValue @{}
        }
        
        if ($null -eq $packageJson.engines) {
            $packageJson.engines = @{}
        }
        
        if (-not $packageJson.engines.PSObject.Properties.Name -contains "vscode") {
            $packageJson.engines | Add-Member -NotePropertyName "vscode" -NotePropertyValue "^$typesVersion"
        } else {
            $packageJson.engines.vscode = "^$typesVersion"
        }
        
        Write-Host "Updated engines.vscode to: ^$typesVersion"
        $packageJson | ConvertTo-Json -Depth 100 | Set-Content -Path package.json
        Get-Content -Path package.json

    - name: Build Void
      run: |
        yarn gulp vscode-win32-x64
      continue-on-error: true

    - name: Check build output
      run: |
        if (Test-Path .\VSCode-win32-x64) {
          echo "Build output exists"
        } else {
          echo "Build output does not exist"
          exit 1
        }

    - name: Create Release ZIP
      if: success()
      run: |
        Compress-Archive -Path .\VSCode-win32-x64 -DestinationPath .\VoidIDE-Windows.zip
        if (Test-Path .\VoidIDE-Windows.zip) {
          echo "ZIP file created successfully"
        } else {
          echo "Failed to create ZIP file"
          exit 1
        }

    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: VoidIDE-Windows
        path: .\VoidIDE-Windows.zip

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          **/*.log
          **/yarn-error.log
          **/npm-debug.log
